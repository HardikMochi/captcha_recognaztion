# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaRfc6rH88cS5qB8X3aN92NSeax4s03B
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from PIL import ImageFile
import engine
from model import CaptchaModel
import config
import dataset
import pickle
import os

from flask import Flask, redirect, url_for, request, render_template
from werkzeug.utils import secure_filename

# Define a flask app
app = Flask(__name__)



def remove_duplicates(x):
    if len(x) < 2:
        return x
    fin = ""
    for j in x:
        if fin == "":
            fin = j
        else:
            if j == fin[-1]:
                continue
            else:
                fin = fin + j
    return fin


def decode_predictions(preds, encoder):
    preds = preds.permute(1, 0, 2)
    preds = torch.softmax(preds, 2)
    preds = torch.argmax(preds, 2)
    preds = preds.detach().cpu().numpy()
    cap_preds = []
    for j in range(preds.shape[0]):
        temp = []
        for k in preds[j, :]:
            k = k - 1
            if k == -1:
                temp.append("ยง")
            else:
                p = encoder.inverse_transform([k])[0]
                temp.append(p)
        tp = "".join(temp).replace("ยง", "")
        cap_preds.append(remove_duplicates(tp))
    return cap_preds

with open('lbl.pickle', 'rb') as handle:
    lbl_enc = pickle.load(handle)

path = 'captcha_re.pt'
device = torch.device('cpu')
model = CaptchaModel(num_chars=len(lbl_enc.classes_))
model.load_state_dict(torch.load(path, map_location=device))

def prediction(image_path):
    predict_dataset = dataset.ClassificationDataset(
        image_paths=[image_path],
        targets=[[ 7,  3, 17,  6, 18]],
        resize=(config.IMAGE_HEIGHT, config.IMAGE_WIDTH),)

    predict_loader = torch.utils.data.DataLoader(
        predict_dataset)
    valid_preds, test_loss = engine.eval_fn(model, predict_loader)
    valid_cap_preds = []
    for vp in valid_preds:
      current_preds = decode_predictions(vp,lbl_enc)
      valid_cap_preds.extend(current_preds)
    return valid_cap_preds

@app.route('/', methods=['GET'])
def index():
    # Main page
    return render_template('index.html')


@app.route('/predict', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Get the file from post request
        f = request.files['file']

        # Save the file to ./uploads
        basepath = 'captcha_images_v2'
        file_path = os.path.join(
            basepath, secure_filename(f.filename))
        #f.save(file_path)
        print(file_path)
        # Make prediction
        preds = prediction(file_path)
        
        return str(preds[0])
    return None

if __name__ == '__main__':
    app.run(debug=True)